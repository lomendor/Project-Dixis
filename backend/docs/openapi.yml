openapi: 3.0.3
info:
  title: Project-Dixis API
  description: |
    Modern Laravel 11 API for agricultural marketplace connecting producers and consumers.
    
    ## Authentication
    
    This API uses Laravel Sanctum for authentication. Include the Bearer token in the Authorization header:
    ```
    Authorization: Bearer YOUR_TOKEN_HERE
    ```
    
    ## Base URL
    
    - Production: `https://api.project-dixis.com`
    - Development: `http://localhost:8000`
  version: 0.1.0
  contact:
    name: Project-Dixis Support
    url: https://github.com/lomendor/Project-Dixis
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8000
    description: Development server
  - url: https://api.project-dixis.com
    description: Production server

tags:
  - name: Health
    description: System health and status endpoints
  - name: Products
    description: Agricultural products management
  - name: Orders
    description: Order placement and management (requires authentication)

paths:
  /api/health:
    get:
      tags: [Health]
      summary: Check system health
      description: Returns the current status of the API and database connection
      operationId: getHealth
      responses:
        '200':
          description: System is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
                  database:
                    type: string
                    example: connected
                  timestamp:
                    type: string
                    format: date-time
                    example: "2025-08-25T03:45:00.000000Z"
                  version:
                    type: string
                    example: "11.45.2"

  /api/v1/products:
    get:
      tags: [Products]
      summary: List all products
      description: Retrieve a paginated list of all active agricultural products
      operationId: getProducts
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: per_page
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 15
      responses:
        '200':
          description: List of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
              example:
                - id: 1
                  name: "Organic Tomatoes"
                  slug: "organic-tomatoes"
                  price: 12.50
                  unit: "kg"
                  status: "available"
                  producer:
                    id: 1
                    name: "Green Valley Farm"

  /api/v1/products/{id}:
    get:
      tags: [Products]
      summary: Get product details
      description: Retrieve detailed information about a specific product
      operationId: getProduct
      parameters:
        - name: id
          in: path
          description: Product ID
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Product details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/orders:
    post:
      tags: [Orders]
      summary: Create a new order
      description: Place a new order for agricultural products
      operationId: createOrder
      security:
        - sanctum: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrderRequest'
            example:
              items:
                - product_id: 1
                  quantity: 2
                - product_id: 2
                  quantity: 1
              shipping_method: "HOME"
              notes: "Please call before delivery"
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/orders/{id}:
    get:
      tags: [Orders]
      summary: Get order details
      description: Retrieve detailed information about a specific order
      operationId: getOrder
      security:
        - sanctum: []
      parameters:
        - name: id
          in: path
          description: Order ID
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Order details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '401':
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Access denied - not your order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    Product:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Organic Tomatoes"
        slug:
          type: string
          example: "organic-tomatoes"
        price:
          type: number
          format: decimal
          example: 12.50
        unit:
          type: string
          example: "kg"
        status:
          type: string
          enum: [available, unavailable, seasonal]
          example: "available"
        producer:
          $ref: '#/components/schemas/Producer'

    Producer:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Green Valley Farm"

    CreateOrderRequest:
      type: object
      required:
        - items
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItemRequest'
          minItems: 1
        shipping_method:
          type: string
          enum: [HOME, PICKUP]
          example: "HOME"
        notes:
          type: string
          example: "Please call before delivery"

    OrderItemRequest:
      type: object
      required:
        - product_id
        - quantity
      properties:
        product_id:
          type: integer
          example: 1
        quantity:
          type: integer
          minimum: 1
          example: 2

    Order:
      type: object
      properties:
        id:
          type: integer
          example: 1
        user_id:
          type: integer
          example: 1
        subtotal:
          type: number
          format: decimal
          example: 45.50
        tax_amount:
          type: number
          format: decimal
          example: 4.55
        shipping_amount:
          type: number
          format: decimal
          example: 5.00
        total_amount:
          type: number
          format: decimal
          example: 55.05
        payment_status:
          type: string
          enum: [pending, paid, failed, cancelled]
          example: "pending"
        status:
          type: string
          enum: [pending, paid, shipped, completed, cancelled]
          example: "pending"
        shipping_method:
          type: string
          enum: [HOME, PICKUP]
          example: "HOME"
        notes:
          type: string
          nullable: true
          example: "Please call before delivery"
        created_at:
          type: string
          format: date-time
          example: "2025-08-25T03:45:00.000000Z"
        updated_at:
          type: string
          format: date-time
          example: "2025-08-25T03:45:00.000000Z"
        order_items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'

    OrderItem:
      type: object
      properties:
        id:
          type: integer
          example: 1
        order_id:
          type: integer
          example: 1
        product_id:
          type: integer
          example: 1
        quantity:
          type: integer
          example: 2
        unit_price:
          type: number
          format: decimal
          example: 12.50
        total_price:
          type: number
          format: decimal
          example: 25.00
        product_name:
          type: string
          example: "Organic Tomatoes"
        product_unit:
          type: string
          example: "kg"
        product:
          $ref: '#/components/schemas/Product'

    Error:
      type: object
      properties:
        message:
          type: string
          example: "Not found"

    ValidationError:
      type: object
      properties:
        message:
          type: string
          example: "The given data was invalid."
        errors:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
          example:
            items: ["The items field is required."]
            "items.0.product_id": ["The selected product_id is invalid."]

  securitySchemes:
    sanctum:
      type: http
      scheme: bearer
      bearerFormat: token
      description: |
        Laravel Sanctum token authentication. Obtain a token through login or registration endpoints.
        
        Include the token in the Authorization header:
        ```
        Authorization: Bearer YOUR_TOKEN_HERE
        ```