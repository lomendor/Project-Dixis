name: Auto-label UI-only

on:
  pull_request_target:
    types: [opened, synchronize, reopened, ready_for_review, labeled, unlabeled]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  label:
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    steps:
      - name: Ensure label exists
        uses: actions/github-script@v7
        with:
          script: |
            const {owner, repo} = context.repo;
            const label = 'ui-only';
            const color = '0E8A16';
            try {
              await github.rest.issues.getLabel({owner, repo, name: label});
            } catch {
              await github.rest.issues.createLabel({owner, repo, name: label, color, description: 'UI-only fast path (light CI)'});
            }

      - name: Evaluate changed files & apply/remove label
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const {owner, repo} = context.repo;
            const num = pr.number;

            const files = await github.paginate(github.rest.pulls.listFiles, {owner, repo, pull_number: num, per_page: 100});
            const names = files.map(f => f.filename);

            const allowedPrefixes = ['frontend/', 'public/', 'frontend/tests/e2e/', 'docs/'];
            const disallowedPrefixes = [
              'prisma/', 'backend/', 'server/', 'packages/', 'infra/', 'database/', 'db/', 'api/', '.github/', 'scripts/'
            ];
            const disallowedRootFiles = new Set(['package.json','pnpm-lock.yaml','turbo.json','Dockerfile','docker-compose.yml']);

            const isAllowedOnly = names.length > 0 && names.every(n => allowedPrefixes.some(p => n.startsWith(p)));
            const touchesDisallowed =
              names.some(n => disallowedPrefixes.some(p => n.startsWith(p))) ||
              names.some(n => disallowedRootFiles.has(n)) ||
              names.some(n => !n.includes('/')); // root-level changes

            const hasLabel = pr.labels.some(l => l.name === 'ui-only');

            if (isAllowedOnly && !touchesDisallowed) {
              if (!hasLabel) {
                await github.rest.issues.addLabels({owner, repo, issue_number: num, labels: ['ui-only']});
                core.info("Added label 'ui-only'.");
              } else {
                core.info("Label 'ui-only' already present.");
              }
            } else {
              if (hasLabel) {
                await github.rest.issues.removeLabel({owner, repo, issue_number: num, name: 'ui-only'}).catch(()=>{});
                core.info("Removed label 'ui-only' (non-UI changes detected).");
              } else {
                core.info("Not a UI-only PR â€” no label applied.");
              }
            }
