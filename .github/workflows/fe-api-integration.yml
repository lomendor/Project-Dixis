name: FE-API Integration

on:
  push:
    paths:
      - 'frontend/**'
      - 'backend/app/**'
      - 'backend/routes/**'
      - '.github/workflows/fe-api-integration.yml'
  pull_request:
    paths:
      - 'frontend/**'
      - 'backend/app/**'
      - 'backend/routes/**'
  workflow_dispatch:

concurrency:
  group: fe-api-integration-${{ github.ref }}
  cancel-in-progress: true

jobs:
  integration:
    timeout-minutes: 15
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: project_dixis_test
        ports: ['5432:5432']
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    
    env:
      BACKEND_PORT: 8001
      FRONTEND_PORT: 3000
      NEXT_PUBLIC_API_BASE_URL: "http://127.0.0.1:${{ env.BACKEND_PORT }}/api/v1"
      PLAYWRIGHT_BASE_URL: "http://127.0.0.1:3000"
      PLAYWRIGHT_JOBS: 1
      PW_TEST_RETRIES: 2
      PW_TEST_TIMEOUT: 30000
    
    steps:
      - uses: actions/checkout@v4
      
      # Backend setup
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: mbstring, intl, bcmath, pgsql, pdo_pgsql
          coverage: none
      
      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: backend/vendor
          key: composer-${{ runner.os }}-${{ hashFiles('backend/composer.lock') }}
          restore-keys: composer-${{ runner.os }}-
      
      - name: Install backend dependencies
        working-directory: backend
        run: composer install --no-interaction --prefer-dist
      
      - name: Copy backend .env
        working-directory: backend
        run: cp .env.example .env || touch .env
      
      - name: Generate application key
        working-directory: backend
        run: php artisan key:generate
      
      - name: Prepare backend testing env
        working-directory: backend
        run: |
          cp -f .env.example .env.testing
          echo "APP_ENV=testing" >> .env.testing
          echo "ALLOW_TEST_LOGIN=true" >> .env.testing
          echo "SANCTUM_STATEFUL_DOMAINS=localhost,127.0.0.1" >> .env.testing
          echo "DB_CONNECTION=pgsql" >> .env.testing
          echo "DB_HOST=127.0.0.1" >> .env.testing
          echo "DB_PORT=5432" >> .env.testing
          echo "DB_DATABASE=project_dixis_test" >> .env.testing
          echo "DB_USERNAME=postgres" >> .env.testing
          echo "DB_PASSWORD=postgres" >> .env.testing
          echo "CI=true" >> .env.testing
          php -r "file_exists('artisan') || exit(1);"
        shell: bash

      - name: Run backend migrations and seed
        working-directory: backend
        run: php artisan migrate:fresh --seed --env=testing

      - name: Start backend (testing) & healthcheck
        working-directory: backend
        env:
          APP_ENV: testing
          ALLOW_TEST_LOGIN: true
        run: |
          php artisan config:clear
          php artisan migrate --force --env=testing
          # Run in background
          nohup php artisan serve --host=127.0.0.1 --port=${BACKEND_PORT} --env=testing >/dev/null 2>&1 &
          # Healthcheck: accept 200/405 as "route exists"; fail only on 404
          for i in {1..30}; do
            code=$(curl -s -o /dev/null -w "%{http_code}" http://127.0.0.1:${BACKEND_PORT}/api/v1/test/login || true)
            if [ "$code" = "200" ] || [ "$code" = "405" ]; then echo "OK test-login ($code)"; break; fi
            echo "waiting backend... ($i)"
            sleep 2
          done
          if [ "$code" = "404" ] || [ -z "$code" ]; then
            php artisan route:list | grep -i test/login || true
            echo "FATAL: test-login route not available (HTTP $code)"; exit 1
          fi
        shell: bash

      - name: Wait for backend API health
        run: |
          timeout 60 bash -c 'until curl -f http://127.0.0.1:${BACKEND_PORT}/api/health; do sleep 2; done'
      
      # Frontend setup
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: ${{ runner.os }}-playwright-
      
      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci

      - name: Install and build contracts dependencies
        run: |
          if [ -d "packages/contracts" ]; then
            cd packages/contracts
            npm ci
            npm run build
          else
            echo "No contracts directory found"
          fi

      - name: Set frontend API base URL
        working-directory: frontend
        run: echo "NEXT_PUBLIC_API_BASE_URL=http://127.0.0.1:${BACKEND_PORT}/api/v1" > .env.local
      
      - name: Install Playwright browsers with dependencies
        working-directory: frontend
        run: npx playwright install --with-deps
      
      - name: Build frontend
        working-directory: frontend
        run: npm run build
      
      - name: Start frontend server (${FRONTEND_PORT})
        working-directory: frontend
        run: nohup npm run start -- -p ${FRONTEND_PORT} > ../frontend.log 2>&1 &
      
      - name: Wait for frontend server
        run: |
          timeout 60 bash -c 'until curl -f http://127.0.0.1:${FRONTEND_PORT}; do sleep 2; done'

      - name: Dump routes (diagnostics)
        working-directory: backend
        run: php artisan route:list | grep -E "api/v1/test/login|api/v1/auth|sanctum" || true

      # Run Integration E2E tests
      - name: Run integration tests
        working-directory: frontend
        env:
          CI: true
          NEXT_PUBLIC_E2E: "true"
          ADMIN_UI_AVAILABLE: false
          # BACKEND_PORT and FRONTEND_PORT moved to job level
        run: ./scripts/safe-playwright-grep.sh "integration"
      
      # Artifacts ΜΟΝΟ σε αποτυχία
      - name: Upload Playwright report (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: integration-playwright-report
          path: frontend/playwright-report
          retention-days: 3
      
      - name: Upload test artifacts (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: integration-artifacts
          path: |
            frontend/test-results
            frontend/playwright/.cache
          retention-days: 3