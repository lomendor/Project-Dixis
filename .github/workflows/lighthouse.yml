name: Lighthouse CI

on:
  pull_request:
    branches: [ main, develop ]

jobs:
  lighthouse:
    runs-on: ubuntu-latest
    continue-on-error: true  # Don't block the build
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: dixis_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: pdo, pdo_pgsql, mbstring, xml, ctype, json, tokenizer
          
      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: Install backend dependencies
        run: cd backend && composer install --no-progress --prefer-dist --optimize-autoloader
        
      - name: Install frontend dependencies
        run: cd frontend && npm ci

      - name: Install contracts dependencies
        run: cd packages/contracts && npm ci

      - name: Setup backend environment
        run: |
          cd backend
          cp .env.example .env
          php artisan key:generate
          echo "DB_CONNECTION=pgsql" >> .env
          echo "DB_HOST=127.0.0.1" >> .env
          echo "DB_PORT=5432" >> .env
          echo "DB_DATABASE=dixis_test" >> .env
          echo "DB_USERNAME=postgres" >> .env
          echo "DB_PASSWORD=postgres" >> .env
        
      - name: Setup database
        run: cd backend && php artisan migrate:fresh --seed
        
      - name: Start backend server
        run: cd backend && php artisan serve --host=127.0.0.1 --port=8001 &
        
      - name: Build frontend
        run: |
          cd frontend
          npm run build
        
      - name: Install wait-on utility
        run: npm install -g wait-on
        
      - name: Wait for backend service
        run: |
          wait-on http://127.0.0.1:8001/api/health --timeout 90000
        
      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli
        
      - name: Run Lighthouse CI
        run: |
          cd frontend
          lhci autorun --collect.staticDistDir=.next --upload.target=temporary-public-storage
        timeout-minutes: 10
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Upload Lighthouse report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse-report
          path: |
            frontend/.lighthouseci/
          retention-days: 7
          
      - name: Create reports directory
        run: |
          mkdir -p docs/reports/$(date +%Y-%m-%d)

      - name: Generate Lighthouse summary
        if: always()
        run: |
          cd frontend
          if [ -d ".lighthouseci" ]; then
            echo "# 🏍️ Lighthouse CI Summary - $(date +%Y-%m-%d)" > ../docs/reports/$(date +%Y-%m-%d)/LHCI-SUMMARY.md
            echo "" >> ../docs/reports/$(date +%Y-%m-%d)/LHCI-SUMMARY.md
            echo "## 📊 Performance Metrics" >> ../docs/reports/$(date +%Y-%m-%d)/LHCI-SUMMARY.md
            echo "" >> ../docs/reports/$(date +%Y-%m-%d)/LHCI-SUMMARY.md
            echo "*Static build analysis with continue-on-error for PR flow*" >> ../docs/reports/$(date +%Y-%m-%d)/LHCI-SUMMARY.md
            echo "" >> ../docs/reports/$(date +%Y-%m-%d)/LHCI-SUMMARY.md
            echo "Generated on: $(date)" >> ../docs/reports/$(date +%Y-%m-%d)/LHCI-SUMMARY.md
          fi

      - name: Upload Lighthouse summary
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse-summary
          path: docs/reports/*/LHCI-SUMMARY.md
          retention-days: 7