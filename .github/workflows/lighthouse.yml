name: Lighthouse CI

on:
  pull_request:
    branches: [ main, develop ]

jobs:
  lighthouse:
    runs-on: ubuntu-latest
    continue-on-error: true  # Don't block the build

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        run: cd frontend && npm ci

      - name: Install contracts dependencies
        run: cd packages/contracts && npm ci

      - name: Build frontend
        run: |
          cd frontend
          npm run build
        env:
          NEXT_PUBLIC_API_BASE_URL: http://localhost:3200

      - name: Install wait-on utility
        run: npm install -g wait-on

      - name: Install express for mock API
        run: cd frontend && npm install express

      - name: Start mock API and Next
        run: |
          cd frontend
          echo "Starting mock API..."
          MOCK_PORT=3200 npm run mock:api > mock-api.log 2>&1 &
          sleep 5
          echo "Mock API startup logs (first 20 lines):"
          head -20 mock-api.log || echo "No mock API logs yet"
          echo "Checking if mock API bound to port 3200..."
          lsof -i :3200 || echo "No process on port 3200"
          echo "Testing direct curl to mock API health endpoint..."
          curl -v http://localhost:3200/api/v1/health || echo "Curl failed"
          echo "Starting Next.js..."
          npm run start:ci &
        env:
          NEXT_PUBLIC_API_BASE_URL: http://localhost:3200

      - name: Wait for services
        run: |
          npx wait-on --timeout 120000 http://localhost:3200/api/v1/health
          npx wait-on --timeout 120000 http://localhost:3100

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli

      - name: Run Lighthouse CI
        run: |
          cd frontend
          lhci autorun --collect.startServerCommand="echo 'already started'" --collect.url=http://localhost:3100 --upload.target=temporary-public-storage
        timeout-minutes: 10
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Upload Lighthouse report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse-report
          path: |
            frontend/.lighthouseci/
          retention-days: 7
          
      - name: Create reports directory
        run: |
          mkdir -p docs/reports/$(date +%Y-%m-%d)

      - name: Generate Lighthouse summary
        if: always()
        run: |
          cd frontend
          if [ -d ".lighthouseci" ]; then
            echo "# 🏍️ Lighthouse CI Summary - $(date +%Y-%m-%d)" > ../docs/reports/$(date +%Y-%m-%d)/LHCI-SUMMARY.md
            echo "" >> ../docs/reports/$(date +%Y-%m-%d)/LHCI-SUMMARY.md
            echo "## 📊 Performance Metrics" >> ../docs/reports/$(date +%Y-%m-%d)/LHCI-SUMMARY.md
            echo "" >> ../docs/reports/$(date +%Y-%m-%d)/LHCI-SUMMARY.md
            echo "*Analysis using mock API (ports 3100/3200) - no database dependencies*" >> ../docs/reports/$(date +%Y-%m-%d)/LHCI-SUMMARY.md
            echo "" >> ../docs/reports/$(date +%Y-%m-%d)/LHCI-SUMMARY.md
            echo "- Next.js: http://localhost:3100" >> ../docs/reports/$(date +%Y-%m-%d)/LHCI-SUMMARY.md
            echo "- Mock API: http://localhost:3200" >> ../docs/reports/$(date +%Y-%m-%d)/LHCI-SUMMARY.md
            echo "" >> ../docs/reports/$(date +%Y-%m-%d)/LHCI-SUMMARY.md
            echo "Generated on: $(date)" >> ../docs/reports/$(date +%Y-%m-%d)/LHCI-SUMMARY.md
          fi

      - name: Upload Lighthouse summary
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse-summary
          path: docs/reports/*/LHCI-SUMMARY.md
          retention-days: 7

      - name: Cleanup background processes
        if: always()
        run: |
          echo "Stopping background processes..."
          # Kill any processes on the ports
          lsof -ti:3200 | xargs -r kill 2>/dev/null || true
          lsof -ti:3100 | xargs -r kill 2>/dev/null || true