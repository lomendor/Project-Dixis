name: Pull Request Quality Gates

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
  workflow_dispatch:

concurrency:
  group: pr-${{ github.event.number }}
  cancel-in-progress: true

jobs:
  qa:
    name: Quality Assurance
    runs-on: ubuntu-latest
    timeout-minutes: 25
    continue-on-error: ${{ startsWith(github.head_ref, 'ci/') }}
    defaults:
      run:
        working-directory: frontend

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect docs-only changes
        id: docs
        shell: bash
        working-directory: .
        run: |
          git fetch origin ${{ github.base_ref }} --depth=1 || true
          files=$(git diff --name-only "origin/${{ github.base_ref }}"..."${{ github.sha }}" || echo "")
          non_docs=$(echo "$files" | grep -Ev '^(docs/|README\.md$|CHANGELOG\.md$|CONTRIBUTING\.md$|.*\.md$|.*\.txt$)' || true)
          if [ -z "$non_docs" ]; then
            echo "DOCS_ONLY=true" >> $GITHUB_ENV
            echo "‚úÖ Docs-only: skipping QA heavy steps"
          else
            echo "DOCS_ONLY=false" >> $GITHUB_ENV
          fi

      - name: Setup Node.js
        if: env.DOCS_ONLY != 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        if: env.DOCS_ONLY != 'true'
        run: bash ../scripts/ci/install-deps.sh .

      - name: Install and build contracts dependencies
        if: env.DOCS_ONLY != 'true'
        run: |
          if [ -d "../packages/contracts" ]; then
            cd ../packages/contracts
            npm ci
            npm run build
            cd ../../frontend
          else
            echo "No contracts directory found"
          fi

      - name: Run full QA suite
        if: env.DOCS_ONLY != 'true'
        run: |
          if [[ "${{ github.head_ref }}" == ci/* ]]; then
            echo "‚ö†Ô∏è Skipping QA suite on ci/* hotfix branch - allowing minimal quality checks"
            npm run qa:types || echo "Types check failed but continuing on ci/ branch"
            exit 0
          else
            npm run qa:all:ci
          fi

      - name: Build for bundle analysis
        if: env.DOCS_ONLY != 'true'
        run: npm run build


      - name: DoD Gate - No hardcoded English UI strings
        if: env.DOCS_ONLY != 'true'
        working-directory: .
        run: bash scripts/ci/check-hardcoded-english.sh
      - name: Perf Budgets (advisory)
        if: env.DOCS_ONLY != 'true'
        continue-on-error: true
        working-directory: .
        run: |
          SUMMARY=docs/QA/LH-SUMMARY.latest.json
          if [ ! -f "$SUMMARY" ]; then
            echo "‚ÑπÔ∏è (perf) No LH summary found at $SUMMARY; skipping advisory budgets check"
            exit 0
          fi
          node - <<'NODE'
          const fs = require('fs');
          const summary = JSON.parse(fs.readFileSync('docs/QA/LH-SUMMARY.latest.json', 'utf8'));
          const budgets = {
            mobile: { lcp: 2500, perf: 80 },
            desktop: { lcp: 2000, perf: 90 }
          };

          function checkSide(side) {
            const lcp = summary[side]?.lcp ?? null;
            const perf = summary[side]?.perf ?? null;
            const warnings = [];

            if (lcp === null) {
              warnings.push(`${side}: LCP=null (unmeasurable)`);
            } else if (lcp > budgets[side].lcp) {
              warnings.push(`${side}: LCP ${lcp.toFixed(0)}ms > ${budgets[side].lcp}ms`);
            }

            if (typeof perf === 'number' && perf < budgets[side].perf) {
              warnings.push(`${side}: perf ${perf} < ${budgets[side].perf}`);
            }

            return warnings;
          }

          const warnings = [...checkSide('mobile'), ...checkSide('desktop')];

          if (warnings.length) {
            console.log('‚ö†Ô∏è Performance budgets (advisory):');
            warnings.forEach(w => console.log('  - ' + w));
            console.log('\n‚ÑπÔ∏è These are advisory warnings and do not block the PR.');
          } else {
            console.log('‚úÖ Performance budgets OK');
          }
          NODE

  test-smoke:
    name: Smoke Tests
    runs-on: ubuntu-latest
    timeout-minutes: 25
    continue-on-error: true  # Pass 45: Advisory until E2E fully stabilized in Phase 2
    defaults:
      run:
        working-directory: frontend

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: bash ../scripts/ci/install-deps.sh .

      - name: Install and build contracts dependencies
        run: |
          if [ -d "../packages/contracts" ]; then
            cd ../packages/contracts
            npm ci
            npm run build
            cd ../../frontend
          else
            echo "No contracts directory found"
          fi

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: Start Test API server
        env:
          TEST_API_PORT: 8001
        run: |
          nohup npm run test:api > /tmp/test-api.log 2>&1 &
          npx --yes wait-on http://127.0.0.1:8001/health --timeout 120000
          echo "‚úÖ Test API server ready on port 8001"

      - name: Build and start Next.js app
        env:
          NODE_ENV: production
          NEXT_PUBLIC_API_BASE_URL: "http://127.0.0.1:8001"
          API_BASE_URL: "http://127.0.0.1:8001"
          NEXT_TELEMETRY_DISABLED: 1
        run: |
          npm run build
          nohup npm run start -- -p 3000 > /tmp/app.log 2>&1 &
          npx --yes wait-on http://127.0.0.1:3000 --timeout 120000
          echo "‚úÖ Next.js app ready on port 3000"

      - name: Run smoke tests (auth-probe only)
        run: npx playwright test tests/e2e/auth-probe.spec.ts --reporter=list
        env:
          CI: true
          BASE_URL: http://127.0.0.1:3000
          PLAYWRIGHT_BASE_URL: http://127.0.0.1:3000
          API_BASE_URL: http://127.0.0.1:8001
          NEXT_PUBLIC_API_BASE_URL: http://127.0.0.1:8001
          NEXT_PUBLIC_E2E: "true"
          NEXT_TELEMETRY_DISABLED: 1

      - name: Upload test results
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: smoke-test-results
          path: frontend/test-results/
          retention-days: 3

      # Always upload artifacts for analysis
      - name: Upload Playwright report (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: smoke-playwright-report-always
          path: frontend/playwright-report/
          retention-days: 7

      - name: Upload test results (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: smoke-test-results-always
          path: frontend/test-results/
          retention-days: 7

      - name: Cleanup CI processes
        if: always()
        working-directory: frontend
        run: |
          pkill -f "npm run test:api|npm run start|node.*test-api" || true
          echo "---- /tmp/test-api.log (tail) ----"
          tail -n 120 /tmp/test-api.log 2>/dev/null || echo "No test-api.log"
          echo "---- /tmp/app.log (tail) ----"
          tail -n 120 /tmp/app.log 2>/dev/null || echo "No app.log"

  danger:
    name: PR Hygiene Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository
    # Pass 62: Strict commit discipline restored - commitlint required
    permissions:
      contents: read
      pull-requests: write
      statuses: write
      checks: write
    defaults:
      run:
        working-directory: frontend

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: bash ../scripts/ci/install-deps.sh .

      - name: Run commitlint
        run: |
          # cleanup: temporary guards removed post-#243; QA tools remain via npm scripts
          npx commitlint --from HEAD~1 --to HEAD --verbose

      - name: Run Danger
        run: |
          # cleanup: temporary guards removed post-#243; QA tools remain via npm scripts
          npx danger ci
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # TODO: Re-enable Lighthouse CI after fixing configuration issue
  # lhci:
  #   name: Lighthouse CI
  #   runs-on: ubuntu-latest
  #   defaults:
  #     run:
  #       working-directory: frontend

  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4

  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '20'
  #         cache: 'npm'
  #         cache-dependency-path: frontend/package-lock.json

  #     - name: Install dependencies
  #       run: npm ci

  #     - name: Build application
  #       run: npm run build

  #     - name: Run Lighthouse CI
  #       run: npm run lhci
  #       env:
  #         LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  #     - name: Generate Lighthouse summary
  #       if: always()
  #       run: |
  #         mkdir -p docs/reports/$(date +%Y-%m-%d)
  #         echo "# üöÄ Lighthouse CI Summary" > docs/reports/$(date +%Y-%m-%d)/LHCI-SUMMARY.md
  #         echo "" >> docs/reports/$(date +%Y-%m-%d)/LHCI-SUMMARY.md
  #         echo "**Date**: $(date)" >> docs/reports/$(date +%Y-%m-%d)/LHCI-SUMMARY.md
  #         echo "**Commit**: ${{ github.sha }}" >> docs/reports/$(date +%Y-%m-%d)/LHCI-SUMMARY.md
  #         echo "**PR**: #${{ github.event.number }}" >> docs/reports/$(date +%Y-%m-%d)/LHCI-SUMMARY.md
  #         echo "" >> docs/reports/$(date +%Y-%m-%d)/LHCI-SUMMARY.md
  #         echo "## Performance Scores" >> docs/reports/$(date +%Y-%m-%d)/LHCI-SUMMARY.md
  #         echo "- Homepage: ‚úÖ Performance audit completed" >> docs/reports/$(date +%Y-%m-%d)/LHCI-SUMMARY.md
  #         echo "- Products: ‚úÖ Performance audit completed" >> docs/reports/$(date +%Y-%m-%d)/LHCI-SUMMARY.md
  #         echo "- Cart: ‚úÖ Performance audit completed" >> docs/reports/$(date +%Y-%m-%d)/LHCI-SUMMARY.md
  #         echo "" >> docs/reports/$(date +%Y-%m-%d)/LHCI-SUMMARY.md
  #         echo "*See full Lighthouse reports in CI artifacts*" >> docs/reports/$(date +%Y-%m-%d)/LHCI-SUMMARY.md

  #     - name: Upload Lighthouse reports
  #       if: always()
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: lighthouse-reports
  #         path: frontend/.lighthouseci/
  #         retention-days: 7

  quality-gates:
    name: quality-gates
    runs-on: ubuntu-latest
    needs: [qa, test-smoke, danger]
    if: always()
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changed files (docs-only fastpath)
        id: diff
        shell: bash
        run: |
          git fetch origin ${{ github.base_ref }} --depth=1 || true
          files=$(git diff --name-only "origin/${{ github.base_ref }}"..."${{ github.sha }}" || echo "")
          echo "Changed files:"; echo "$files"
          if [ -z "$files" ]; then echo "DOCS_ONLY=false" >> $GITHUB_ENV; exit 0; fi
          non_docs=$(echo "$files" | grep -Ev '^(docs/|README\.md$|CHANGELOG\.md$|CONTRIBUTING\.md$|.*\.md$|.*\.txt$)' || true)
          if [ -z "$non_docs" ]; then
            echo "DOCS_ONLY=true" >> $GITHUB_ENV
            echo "‚úÖ Docs-only PR detected - using fastpath"
          else
            echo "DOCS_ONLY=false" >> $GITHUB_ENV
          fi

      - name: "Docs-only fastpath: mark success"
        if: env.DOCS_ONLY == 'true'
        run: echo "‚úÖ Docs-only PR - skipping dependent job checks, quality-gates success via fastpath."

      - name: Check all gates passed
        if: env.DOCS_ONLY != 'true'
        run: |
          if [[ "${{ needs.qa.result }}" != "success" ]]; then
            echo "‚ùå Quality Assurance failed"
            exit 1
          fi
          # Smoke Tests and PR Hygiene are advisory (continue-on-error)
          # So we accept success, failure, or skipped
          echo "‚úÖ All quality gates evaluated (advisory gates may have warnings)"
          exit 0