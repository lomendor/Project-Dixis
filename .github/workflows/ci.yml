name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - 'docs/**'
      - 'backend/docs/**'
      - '**/*.md'
  pull_request:
    branches: [ main, develop ]
    paths-ignore:
      - 'docs/**'
      - 'backend/docs/**'
      - '**/*.md'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  dependabot-smoke:
    runs-on: ubuntu-latest
    if: ${{ github.actor == 'dependabot[bot]' || github.actor == 'dependabot-preview[bot]' }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '20.x'
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
      - name: Install frontend deps
        run: bash ../scripts/ci/install-deps.sh frontend
      - name: Type check (dependabot)
        working-directory: frontend
        run: npm run type-check
      - name: PHP version check
        run: php -v

  backend:
    runs-on: ubuntu-latest
    if: ${{ github.actor != 'dependabot[bot]' && github.actor != 'dependabot-preview[bot]' }}
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: project_dixis_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: pdo, pdo_pgsql, mbstring, xml, ctype, json, tokenizer
          
      - name: Copy environment file
        run: cd backend && cp .env.example .env
        
      - name: Install dependencies
        run: cd backend && composer install --no-progress --prefer-dist --optimize-autoloader
        
      - name: Generate key
        run: cd backend && php artisan key:generate
        
      - name: Configure database
        run: |
          cd backend
          echo "DB_CONNECTION=pgsql" >> .env
          echo "DB_HOST=127.0.0.1" >> .env
          echo "DB_PORT=5432" >> .env
          echo "DB_DATABASE=project_dixis_test" >> .env
          echo "DB_USERNAME=postgres" >> .env
          echo "DB_PASSWORD=postgres" >> .env
        
      - name: Run migrations and seed
        run: cd backend && php artisan migrate:fresh --seed
        
      - name: Start backend server
        run: cd backend && php artisan serve --host=127.0.0.1 --port=8001 &
        
      - name: Wait for backend
        run: npx wait-on http://127.0.0.1:8001/api/health --timeout 60000
        
      - name: Run backend tests
        run: cd backend && php artisan test

  frontend:
    runs-on: ubuntu-latest
    if: ${{ github.actor != 'dependabot[bot]' && github.actor != 'dependabot-preview[bot]' }}
    needs: backend

    env:
      FRONTEND_PORT: 3000
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '20'

      - name: Install dependencies
        run: bash ../scripts/ci/install-deps.sh frontend

      - name: Install contracts dependencies
        run: |
          if [ -d "packages/contracts" ]; then
            cd packages/contracts && npm ci
          else
            echo "No contracts directory found"
          fi

      - name: Build contracts package
        run: |
          if [ -d "packages/contracts" ]; then
            cd packages/contracts && npm run build
          else
            echo "No contracts directory found"
          fi

      - name: Type check
        run: cd frontend && npm run type-check
        
      - name: Build
        run: cd frontend && npm run build

      - name: Start frontend server
        run: |
          cd frontend
          echo "Starting frontend on port $FRONTEND_PORT"
          PORT=$FRONTEND_PORT npm run start &
        
      - name: Wait for frontend
        run: |
          echo "Waiting for http://127.0.0.1:$FRONTEND_PORT"
          npx wait-on http://127.0.0.1:$FRONTEND_PORT --timeout 60000

  unit-tests:
    runs-on: ubuntu-latest
    if: ${{ github.actor != 'dependabot[bot]' && github.actor != 'dependabot-preview[bot]' }}
    needs: [backend]

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '20'

      - name: Install dependencies
        run: bash ../scripts/ci/install-deps.sh frontend

      - name: Run execution issue tests
        run: cd frontend && npm run test:execution-issues

      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-results
          path: |
            frontend/coverage/
            frontend/test-results/
          retention-days: 7

  e2e:
    runs-on: ubuntu-latest
    if: ${{ github.actor != 'dependabot[bot]' && github.actor != 'dependabot-preview[bot]' }}
    continue-on-error: ${{ github.head_ref == 'ci/hygiene-guard-and-e2e-stabilize' }}  # TEMP: unblock #243 only; E2E auth/storageState fix will follow in separate PR
    needs: [backend, frontend]

    env:
      FRONTEND_PORT: 3000

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: project_dixis_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: pdo, pdo_pgsql, mbstring, xml, ctype, json, tokenizer
          
      - name: Setup Node.js  
        uses: actions/setup-node@v5
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install backend dependencies
        run: cd backend && composer install --no-progress --prefer-dist --optimize-autoloader

      - name: Install frontend dependencies
        run: cd frontend && npm ci

      - name: Install contracts dependencies
        run: cd packages/contracts && npm ci

      - name: Build contracts package
        run: cd packages/contracts && npm run build

      - name: Install Playwright browsers
        run: cd frontend && npx playwright install --with-deps chromium
        
      - name: Setup backend environment
        run: |
          cd backend
          cp .env.example .env
          php artisan key:generate
          echo "DB_CONNECTION=pgsql" >> .env
          echo "DB_HOST=127.0.0.1" >> .env
          echo "DB_PORT=5432" >> .env
          echo "DB_DATABASE=project_dixis_test" >> .env
          echo "DB_USERNAME=postgres" >> .env
          echo "DB_PASSWORD=postgres" >> .env
        
      - name: Setup database
        run: cd backend && php artisan migrate:fresh --seed
        
      - name: Start backend server
        run: cd backend && php artisan serve --host=127.0.0.1 --port=8001 &
        
      - name: Build frontend
        run: cd frontend && npm run build

      - name: Start frontend server
        run: |
          cd frontend
          echo "Starting frontend on port $FRONTEND_PORT"
          PORT=$FRONTEND_PORT npm run start &
        
      - name: Wait for services
        run: |
          echo "Waiting for backend API..."
          npx wait-on http://127.0.0.1:8001/api/health --timeout 60000
          echo "Waiting for frontend on http://127.0.0.1:$FRONTEND_PORT"
          npx wait-on http://127.0.0.1:$FRONTEND_PORT --timeout 60000

      - name: Set E2E quarantine (Pass 41: global @quarantine tag)
        run: |
          echo "QUARANTINE_REGEX=@quarantine" >> $GITHUB_ENV
          echo "âœ… E2E quarantine enabled: tests tagged @quarantine will be skipped"

      - name: Run E2E tests (excluding @quarantine)
        run: cd frontend && npm run test:e2e:ci
        env:
          CI: true
        
      - name: Upload Playwright artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: |
            frontend/playwright-report/
            frontend/test-results/
          retention-days: 7

  e2e-webserver:
    runs-on: ubuntu-latest
    if: ${{ github.actor != 'dependabot[bot]' && github.actor != 'dependabot-preview[bot]' }}
    defaults:
      run:
        working-directory: frontend
    env:
      NODE_ENV: production
      PORT: 3000
      DATABASE_URL: file:./dev.db
      OTP_BYPASS: "000000"
      ADMIN_PHONES: "+306900000084"
      DEV_MAIL_TO: ""
      NEXT_PUBLIC_SITE_URL: http://127.0.0.1:3000
      VAT_RATE: "0.13"
      SHIPPING_FLAT_EUR: "3.5"
      SHIPPING_FREE_FROM_EUR: "25"
      DIXIS_ENV: preview

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: Install deps
        run: npm ci

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps

      - name: Generate Prisma Client
        run: npx prisma generate

      - name: Run E2E (build+start via webServer)
        run: npm run test:e2e

      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-webserver-report
          path: |
            frontend/playwright-report/
            frontend/test-results/
          retention-days: 7