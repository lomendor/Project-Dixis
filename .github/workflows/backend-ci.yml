name: Backend CI

on:
  push:
    branches: [ main ]
    paths: 
      - 'backend/**'
      - '.github/workflows/backend-ci.yml'
  pull_request:
    branches: [ main ]
    paths: 
      - 'backend/**'
      - '.github/workflows/backend-ci.yml'
  workflow_dispatch:

jobs:
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv, imagick, pdo_pgsql
        coverage: none

    - name: Copy environment file
      run: cp backend/.env.example backend/.env

    - name: Configure environment for testing
      run: |
        cd backend
        echo "DB_CONNECTION=pgsql" >> .env
        echo "DB_HOST=127.0.0.1" >> .env
        echo "DB_PORT=5432" >> .env
        echo "DB_DATABASE=postgres" >> .env
        echo "DB_USERNAME=postgres" >> .env
        echo "DB_PASSWORD=postgres" >> .env

    - name: Cache Composer dependencies
      uses: actions/cache@v4
      with:
        path: backend/vendor
        key: ${{ runner.os }}-composer-${{ hashFiles('backend/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-composer-

    - name: Install Composer dependencies
      run: |
        cd backend
        composer install --prefer-dist --no-interaction --no-progress --optimize-autoloader

    - name: Generate application key
      run: |
        cd backend
        php artisan key:generate

    - name: Run database migrations
      run: |
        cd backend
        php artisan migrate --force

    - name: Execute tests
      run: |
        cd backend
        php artisan test --coverage --min=80

    - name: Test health endpoint
      run: |
        cd backend
        php artisan serve --host=127.0.0.1 --port=8080 &
        sleep 3
        curl -f http://127.0.0.1:8080/api/health
        pkill -f "php artisan serve"